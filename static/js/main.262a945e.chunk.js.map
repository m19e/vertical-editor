{"version":3,"sources":["components/Vertical.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["initialFormat","isMincho","fontSize","charCount","useStyles","makeStyles","theme","createStyles","root","width","height","fontFamily","fontWeight","textCenter","textAlign","styles","scroll","position","bottom","Vertical","useState","EditorState","createWithContent","ContentState","createFromText","editorState","setEditorState","text","setText","title","setTitle","useLocalStorage","JSON","stringify","format","setFormat","formatObj","parse","setHeight","setFontSize","scrollbars","createRef","setIsMincho","open","setOpen","classes","useEffect","loadDraft","localStorage","getItem","data","e","convertFromRaw","body","t","getCurrentContent","getPlainText","onEditorChange","isSaved","setIsSaved","document","timer","setTimeout","saveDraft","clearTimeout","editor","draftData","convertToRaw","setItem","firstBlockText","getBlockMap","first","getText","trim","setSelectionState","d","k","getSelection","getAnchorKey","selection","anchorOffset","focusOffset","anchorKey","focusKey","newSelection","merge","newEditor","forceSelection","className","autoHide","autoHideTimeout","autoHideDuration","ref","onWheel","currentScrollDelta","current","getScrollLeft","scrollLeft","deltaY","style","Box","display","m","onChange","keyBindingFn","key","preventDefault","ctrlKey","content","a","createElement","href","URL","createObjectURL","Blob","type","download","Date","now","appendChild","click","removeChild","includes","currentSelection","currentOffset","getAnchorOffset","currentContent","currentKey","blockLen","getBlockForKey","getLength","console","log","beforeKey","getKeyBefore","beforeLen","afterKey","getKeyAfter","beforeOffset","Math","floor","min","afterLen","getDefaultKeyBinding","AppBar","color","top","margin","padding","onMouseOver","ButtonGroup","orientation","aria-label","variant","Button","size","disabled","Fade","in","timeout","onClick","ExpandLess","ExpandMore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.262a945e.chunk.js","sourcesContent":["import React, { useState, useEffect, createRef, CSSProperties } from \"react\";\nimport { Editor, EditorState, ContentState, getDefaultKeyBinding, convertFromRaw, convertToRaw } from \"draft-js\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport { AppBar, Button, ButtonGroup, Box, Fade } from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\nimport { useLocalStorage } from \"react-use\";\nimport \"./Vertical.css\";\n\ninterface StylesProps {\n    isMincho: boolean;\n}\n\ninterface Format {\n    isMincho: boolean;\n    fontSize: number;\n    charCount: number;\n}\n\nconst initialFormat: Format = {\n    isMincho: true,\n    fontSize: 24,\n    charCount: 30,\n};\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme: Theme) =>\n    createStyles({\n        root: {\n            width: \"100%\",\n            height: \"100%\",\n            fontFamily: ({ isMincho }) =>\n                isMincho\n                    ? `\"游明朝体\", \"Yu Mincho\", YuMincho, \"Times New Roman\", TimesNewRoman, serif`\n                    : `\"游ゴシック体\", \"Yu Gothic\", YuGothic, Arial, sans-serif`,\n            fontWeight: ({ isMincho }) => (isMincho ? \"normal\" : 500),\n        },\n        textCenter: {\n            textAlign: \"center\",\n        },\n    })\n);\n\nconst styles: { [key: string]: CSSProperties } = {\n    scroll: {\n        position: \"absolute\",\n        bottom: \"13%\",\n        height: \"85%\",\n        width: \"95%\",\n    },\n};\n\nconst download = (content: string) => {\n    const a = document.createElement(\"a\");\n    a.href = URL.createObjectURL(new Blob([content], { type: \"text/plain\" }));\n    a.download = `draft-${Date.now()}.txt`;\n\n    a.style.display = \"none\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n};\n\nconst Vertical = (): JSX.Element => {\n    const [editorState, setEditorState] = useState(() => EditorState.createWithContent(ContentState.createFromText(\"本文を入力\")));\n    const [text, setText] = useState(\"\");\n    const [title, setTitle] = useState(\"\");\n    const [format, setFormat, remove] = useLocalStorage(\"myFormat\", JSON.stringify(initialFormat));\n    const formatObj: Format = JSON.parse(format || JSON.stringify(initialFormat));\n    const [height, setHeight] = useState(formatObj.charCount);\n    const [fontSize, setFontSize] = useState(formatObj.fontSize);\n\n    const scrollbars: React.RefObject<Scrollbars> = createRef();\n\n    const [isMincho, setIsMincho] = useState(formatObj.isMincho);\n    const [open, setOpen] = useState(false);\n    const classes = useStyles({ isMincho });\n\n    useEffect(() => {\n        const loadDraft = localStorage.getItem(\"myDraft\");\n        if (loadDraft) {\n            const data = JSON.parse(loadDraft);\n            const e = EditorState.createWithContent(convertFromRaw(JSON.parse(data.body)));\n            const t = e.getCurrentContent().getPlainText();\n            setTitle(data.title);\n            if (t) {\n                setText(t);\n                onEditorChange(e);\n            }\n        }\n    }, []);\n\n    const [isSaved, setIsSaved] = useState(true);\n    useEffect(() => {\n        document.title = (isSaved ? \"\" : \"*\") + title + \" | Clara Editor\";\n    }, [title, isSaved]);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            if (!isSaved) saveDraft(editorState);\n        }, 5000);\n        return () => clearTimeout(timer);\n    }, [editorState]);\n\n    useEffect(() => {\n        setFormat(JSON.stringify({ isMincho: isMincho, fontSize: fontSize, charCount: height }));\n    }, [isMincho, fontSize, height]);\n\n    const saveDraft = (editor: EditorState) => {\n        setIsSaved(true);\n        const draftData = {\n            title: title,\n            body: JSON.stringify(convertToRaw(editorState.getCurrentContent())),\n        };\n        localStorage.setItem(\"myDraft\", JSON.stringify(draftData));\n    };\n\n    const onEditorChange = (editor: EditorState) => {\n        if (editor.getCurrentContent().getPlainText() !== text) {\n            setIsSaved(false);\n            setText(editor.getCurrentContent().getPlainText());\n        }\n        const firstBlockText = editor.getCurrentContent().getBlockMap().first().getText().trim();\n        setTitle(firstBlockText || \"無題\");\n        setEditorState(editor);\n    };\n\n    const setSelectionState = (d: number, k: string = editorState.getSelection().getAnchorKey()) => {\n        const selection = editorState.getSelection();\n        let { anchorOffset, focusOffset, anchorKey, focusKey } = JSON.parse(JSON.stringify(selection));\n        anchorOffset = d;\n        focusOffset = d;\n        anchorKey = k;\n        focusKey = k;\n        const newSelection = selection.merge({\n            anchorOffset,\n            focusOffset,\n            anchorKey,\n            focusKey,\n        });\n        const newEditor = EditorState.forceSelection(editorState, newSelection);\n        onEditorChange(newEditor);\n    };\n\n    const handleKey = (e: React.KeyboardEvent) => {\n        // console.log(e.key);\n        if (e.key === \"Tab\") {\n            e.preventDefault();\n            return null;\n        }\n\n        if (e.ctrlKey && e.key === \"s\") {\n            e.preventDefault();\n            saveDraft(editorState);\n            download(editorState.getCurrentContent().getPlainText());\n            return null;\n        }\n\n        if (e.key.includes(\"Arrow\")) {\n            e.preventDefault();\n            const currentSelection = editorState.getSelection();\n            const currentOffset = currentSelection.getAnchorOffset();\n            const currentContent = editorState.getCurrentContent();\n            const currentKey = currentSelection.getAnchorKey();\n            const blockLen = currentContent.getBlockForKey(currentKey).getLength();\n\n            console.log(JSON.stringify(currentSelection, null, 4));\n\n            switch (e.key) {\n                case \"ArrowUp\":\n                    if (currentOffset === 0) {\n                        const beforeKey = currentContent.getKeyBefore(currentKey);\n                        if (!beforeKey) return null;\n                        const beforeLen = currentContent.getBlockForKey(beforeKey).getLength();\n                        setSelectionState(beforeLen, beforeKey);\n                        return null;\n                    }\n                    setSelectionState(currentOffset - 1);\n                    return null;\n                case \"ArrowDown\":\n                    if (currentOffset === blockLen) {\n                        const afterKey = currentContent.getKeyAfter(currentKey);\n                        if (!afterKey) return null;\n                        setSelectionState(0, afterKey);\n                        return null;\n                    }\n                    setSelectionState(currentOffset + 1);\n                    return null;\n                case \"ArrowRight\":\n                    if (currentOffset > height) {\n                        setSelectionState(currentOffset - height, currentKey);\n                        return null;\n                    }\n                    // shift pre-block on caret as display anchoroffset\n                    const beforeKey = currentContent.getKeyBefore(currentKey);\n                    if (!beforeKey) return \"move-selection-to-start-of-block\";\n                    const beforeLen = currentContent.getBlockForKey(beforeKey).getLength();\n                    const beforeTargetLine = Math.floor(beforeLen / height) * height;\n                    const beforeOffset = beforeTargetLine + Math.min(currentOffset % height, beforeLen % height);\n                    setSelectionState(beforeOffset, beforeKey);\n                    return null;\n                case \"ArrowLeft\":\n                    if (blockLen > height) {\n                        if (blockLen >= currentOffset + height) {\n                            setSelectionState(currentOffset + height, currentKey);\n                            return null;\n                        } else {\n                            // shift next-block on caret as display anchoroffset\n                            const afterKey = currentContent.getKeyAfter(currentKey);\n                            if (!afterKey) return \"move-selection-to-end-of-block\";\n                            const afterLen = currentContent.getBlockForKey(afterKey).getLength();\n                            setSelectionState(Math.min(currentOffset % height, afterLen), afterKey);\n                            return null;\n                        }\n                    }\n                    const afterKey = currentContent.getKeyAfter(currentKey);\n                    if (!afterKey) return \"move-selection-to-end-of-block\";\n                    const afterLen = currentContent.getBlockForKey(afterKey).getLength();\n                    const afterOffset = afterLen < currentOffset ? afterLen : currentOffset;\n                    setSelectionState(afterOffset, afterKey);\n                    return null;\n                default:\n                    break;\n            }\n        }\n        return getDefaultKeyBinding(e);\n    };\n\n    const onMouseWheel = (e: React.WheelEvent<Scrollbars>) => {\n        const currentScrollDelta = scrollbars.current?.getScrollLeft() || 0;\n        scrollbars.current?.scrollLeft(currentScrollDelta - e.deltaY);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Scrollbars autoHide autoHideTimeout={1000} autoHideDuration={500} ref={scrollbars} onWheel={onMouseWheel} style={styles.scroll}>\n                <Box display=\"flex\">\n                    <Box m=\"auto\">\n                        <div className=\"tate\" style={{ fontSize: fontSize + \"px\", height: height * fontSize + \"px\" }}>\n                            <Editor editorState={editorState} onChange={onEditorChange} keyBindingFn={handleKey} />\n                        </div>\n                    </Box>\n                </Box>\n                <AppBar position=\"fixed\" color=\"inherit\" style={{ top: \"auto\", bottom: 0 }} className=\"appbar\">\n                    <div style={{ margin: \"auto\", padding: \"8px\" }} onMouseOver={() => setOpen(true)}>\n                        <ButtonGroup\n                            className=\"bgroup\"\n                            orientation=\"vertical\"\n                            color=\"inherit\"\n                            aria-label=\"vertical contained primary button group\"\n                            variant=\"text\"\n                        >\n                            <Button size=\"small\" variant=\"text\" disabled></Button>\n                            <span className={classes.textCenter}>{isMincho ? \"明朝体\" : \"ゴシック体\"}</span>\n                            <Fade in={open} timeout={700}>\n                                <Button\n                                    size=\"small\"\n                                    variant=\"text\"\n                                    onClick={() => setIsMincho(!isMincho)}\n                                    className=\"control\"\n                                    style={{\n                                        fontFamily: !isMincho\n                                            ? `\"游明朝体\", \"Yu Mincho\", YuMincho, \"Times New Roman\", TimesNewRoman, serif`\n                                            : `\"游ゴシック体\", \"Yu Gothic\", YuGothic, Arial, sans-serif`,\n                                        fontWeight: !isMincho ? \"normal\" : 500,\n                                        padding: \"0 8px\",\n                                    }}\n                                >\n                                    {!isMincho ? \"明朝体\" : \"ゴシック体\"}\n                                </Button>\n                            </Fade>\n                        </ButtonGroup>\n                        <ButtonGroup\n                            className=\"bgroup\"\n                            orientation=\"vertical\"\n                            color=\"inherit\"\n                            aria-label=\"vertical contained primary button group\"\n                            variant=\"text\"\n                        >\n                            <Button size=\"small\" variant=\"text\" onClick={() => setFontSize(fontSize + 4)} disabled={fontSize >= 50}>\n                                <ExpandLess className=\"control\" />\n                            </Button>\n                            <span>文字サイズ {fontSize}</span>\n                            <Button size=\"small\" variant=\"text\" onClick={() => setFontSize(fontSize - 4)} disabled={fontSize <= 8}>\n                                <ExpandMore className=\"control\" />\n                            </Button>\n                        </ButtonGroup>\n                        <ButtonGroup\n                            className=\"bgroup\"\n                            orientation=\"vertical\"\n                            color=\"inherit\"\n                            aria-label=\"vertical contained primary button group\"\n                            variant=\"text\"\n                        >\n                            <Button size=\"small\" variant=\"text\" onClick={() => setHeight(height + 1)} disabled={height >= 50}>\n                                <ExpandLess className=\"control\" />\n                            </Button>\n                            <span>字数 {height}</span>\n                            <Button size=\"small\" variant=\"text\" onClick={() => setHeight(height - 1)} disabled={height <= 3}>\n                                <ExpandMore className=\"control\" />\n                            </Button>\n                        </ButtonGroup>\n                    </div>\n                </AppBar>\n            </Scrollbars>\n        </div>\n    );\n};\n\nexport default Vertical;\n","import React from \"react\";\nimport \"./App.css\";\nimport Vertical from \"./Vertical\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Vertical />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}